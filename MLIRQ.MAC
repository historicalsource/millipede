	.TITLE MLIRQ
	.NLIST
	.INCLUDE MLDEF
	.LIST
	.CSECT	MLIRQ


	.SBTTL	SOUNDS - SOUND ROUTINE
;
; ENTRY	(MODE)=0 FOR PLAY MODE
;	(CHAN)=INDEX FOR ALL CHANNELS (2 POKEYS)
; EXIT	(CHAN)=UPDATED FOR NEXT FRAME
;USES TPIRQ1, (TPIRQ2,TPIRQ+1)
SOUNDS:	LDX I,NCHAN		;NUMBER OF SOUNDS
10$:	LDA X,CHAN
	BMI 13$			;IF NEGATIVE INDEX UPDATE EVERY INTERRUPT
	LDA X,MASK
	AND $INTCT
	BNE 49$			;CHECK REPEAT COUNT
	CPX I,NCHAN-7
	BCS 12$			;IF NO HIGHER PRIORITY SOUNDS
	LDA X,CHAN+8
	BNE 49$			;LET HIGH PRIORITY SOUND FINISH
12$:	LDA X,CHAN
13$:	STX TPIRQ1		;SAVE INDEX
	AND I,7F		;CLEAR D7 FLAG IF ANY
	BEQ 23$			;NO SOUND ON THIS CHANNEL
	DEC X,CHAN		;DECREASE COUNT
	TAY
	LDA MODE
	BMI 23$			;IF IN ATTRACT
	TXA
	ASL
	TAX
	LDA X,FREQ+1
	BEQ 30$			;USE CONSTANT FREQUENCY
	STA TPIRQ2+1
	LDA X,FREQ
	STA TPIRQ2
	LDA NY,TPIRQ2		;GET CURRENT VALUE FOR INDEX
	BNE 15$			;IF A FREQ IS PRESENT
	PHA
	BEQ 20$			;TURN OFF VOLUME

15$:	PHA
	LDA X,CONT+1
	BEQ 40$			;USE CONSTANT VOLUME AND AUDIO CONTROL
	STA TPIRQ2+1
	LDA X,CONT
	STA TPIRQ2
	LDA NY,TPIRQ2
20$:	PHA
	TXA
	AND I,0F		;USE LOW PRIORITY SOUND INDEX
	TAX
	PLA
	CPX I,08
	BCC 25$			;USE LOWER POKEY
	STA X,AUDC1-8
	PLA
	CMP I,02
	BCC 48$			;SOMEONE ELSE CHANGES FREQUENCY
	STA X,AUDF1-8
	BCS 48$			;ALWAYS

23$:	CPX I,8
	BCS 49$			;ON HIGH PRIORITY SOUNDS
	PHA
	TXA			;DOUBLE X
	ASL
	TAX
	LDA I,0
	BEQ 20$			;ALWAYS

25$:	STA X,AUDC0		;SET VOLUME, ETC
	PLA
	CMP I,02
	BCC 48$			;SOMEONE ELSE CHANGES FREQUENCY
	STA X,AUDF0		;SET FREQUENCY
48$:	LDX TPIRQ1		;RESTORE INDEX
49$:	DEX
	BPL 10$			;NEXT SOUND
	RTS

30$:	LDA X,FREQ
	JMP 15$

40$:	LDA X,CONT
	BNE 20$			;IF VOLUME IS PRESENT CONTINUE
	PLA			;RESTORE STACK
	JMP 48$			;LEAVE CHANNEL ALONE


;	UNDERSTANDING THESE TABLES
;
; MASK:	THIS DETERMINES THE SPEED AND WHEN TO
;	UPDATE THE SOUNDS.  THUS ALL SOUNDS
;	ARE SYNCED TO THE INTERRUPT COUNTER.
;
; FREQ:	THIS CONTAINS EITHER THE STARTING ADDRESS OF
;	A TABLE MINUS ONE OR THE CONSTANT FREQUENCY
;	TO BE USED ON THE POKEY.  IF A VALUE OF
;	ZERO IS USED THEN THE SOUND ROUTINE
;	ASSUMES THE PROGRAM IS STUFFING THE
;	VALUES INTO POKEY.  THE TABLE OF FREQUENCIES
;	IS IN THE OPPOSITE ORDER WRITTEN
;	TO THE POKEY.  A TABLE VALUE OF ZERO MEANS
;	TO TURN OFF THE VOLUME.  THIS CAN BE
;	USED FOR A REST OR TO SEPARATE
;	TWO DIFFERENT SOUNDS.  A TABLE VALUE OF 1.
;	MEANS SOMEONE ELSE IS STUFFING THE FREQUENCY.
;
; CONT:	THIS IS SIMILAR IN STRUCTURE TO "FREQ"
;	EXCEPT THIS CONTROLS THE VOLUME AND TYPE
;	OF SOUND.  AN ENTRY OF ZERO MEANS
;	SOMEONE ELSE IS CHANGING THE INPUTS
;	TO POKEY.

	
	
MASK:	.BYTE 3,1,3,7		;FRAME MASK TO CONTROL SPEED OF SOUNDS
	.BYTE 3,0,3,3
	.BYTE 3,3,7,1F
FREQ:	.WORD FREQ0-1		;BEETLE
	.WORD FREQ1-1		;CENTIPEDE
	.WORD FREQ2-1		;EXPLOSION SOUND
	.WORD FREQ3-1		;SPIDER SOUND
	.WORD 0			;DRAGONFLY SOUND
	.WORD FREQ5-1		;MOSQUITO SOUND
	.WORD FREQ6-1		;SHOT SOUND
	.WORD 0			;BEE SOUND
	.WORD FREQ8-1		;INCH WORM SOUND
	.WORD FREQ9-1		;EARWIG SOUND
	.WORD FREQ10-1		;PLAYER EXPLOSION
	.WORD FREQ11-1		;BONUS LIFE SOUND
CONT:	.WORD CONT0-1
	.WORD CONT1-1
	.WORD CONT2-1
	.WORD CONT3-1
	.WORD 0
	.WORD CONT5-1
	.WORD 68
	.WORD 0A8
	.WORD 0A9
	.WORD 0A8
	.WORD CONT10-1
	.WORD 0A8
FREQ0:	.BYTE 0,80
CONT0:	.BYTE 0,0A8
FREQ1:	.BYTE 0FC,0FC,0FC,0FC	;CENTIPEDE FEET
	.BYTE 0FC,0FC,0FC,0FC
	.BYTE 0F8,0F8,0F8,0F8
	.BYTE 0F8,0F8,0F8,0F8
	.BYTE 0F4,0F4,0F4,0F4
	.BYTE 0F4,0F4,0F4,0F4
	.BYTE 0FF,0FF,0FF,0FF
	.BYTE 0FF,0FF,0FF,0FF
CONT1:	.BYTE 0,0,0,0
	.BYTE 0A3,0A4,0A5,0A6
	.BYTE 0,0,0,0
	.BYTE 0A4,0A5,0A6,0A7
	.BYTE 0,0,0,0
	.BYTE 0A5,0A6,0A7,0A8
	.BYTE 0,0,0,0A8
	.BYTE 0A9,0AA,0AB,0AC
FREQ2:	.BYTE 0,0,0,0		;EXPLOSION SOUND
	.BYTE 0F0,0E0,0D0,0C0
	.BYTE 0B0,0A0,90,80
	.BYTE 70,60,50,40
	.BYTE 30,20,10,10
	.BYTE 14,20,18,1C	;DDT EXPLOSION EXTENSION
	.BYTE 24,20,28,30
	.BYTE 26,20,24,1C
	.BYTE 14,10,18,10
CONT2:	.BYTE 0,0,0,81
	.BYTE 81,82,82,83
	.BYTE 83,84,84,85
	.BYTE 85,86,86,87
	.BYTE 87,88,88,89
	.BYTE 89,89,8A,8A	;DDT EXPLOSION EXTENSION
	.BYTE 8A,8B,8B,8B
	.BYTE 8C,8C,8D,8D
	.BYTE 8E,8E,8F,8F
FREQ3:	.BYTE 05,05,20,20
	.BYTE 30,30,35,35
	.BYTE 30,30,20,20
	.BYTE 05,05,20,20
	.BYTE 30,30,35,35
CONT3:	.BYTE 0A2,0,0A4,0
	.BYTE 0A6,0,0A8,0
	.BYTE 0A6,0,0A4,0
	.BYTE 0A2,0,0A4,0
	.BYTE 0A6,0,0A4,0	;WELL REPEAT
FREQ5:	.BYTE 90,90,90,90
	.BYTE 90,90,90,90
	.BYTE 40,48,40,48
	.BYTE 50,58,50,58
	.BYTE 60,68,60,68
	.BYTE 70,78,70,78
	.BYTE 80,88,80,88
	.BYTE 90,98,90,98
	.BYTE 0A0,0A8,0A0,0A8
CONT5:	.BYTE 17,0A8,0A8,0A8
	.BYTE 17,0A8,0A8,0A8
	.BYTE 0A9,0A9,0A9,0A9
	.BYTE 0AA,0AA,0AA,0AA
	.BYTE 0AB,0AB,0AB,0AB
	.BYTE 0AC,0AC,0AC,0AC
	.BYTE 0AD,0AD,0AD,0AD
	.BYTE 0AE,0AE,0AE,0AE
	.BYTE 0AF,0AF,0AF,0AF
FREQ6:	.BYTE 0F0,0E0,0D0,0C0
	.BYTE 0B0,0A0,90,80
	.BYTE 70,60,50		;SHOT SOUND
FREQ8:	.BYTE 20,30,40,50
	.BYTE 60,70,0,0
	.BYTE 70,60,50,40
	.BYTE 30,20,0,0
	.BYTE 1
FREQ9:	.BYTE 60,60,70,70
	.BYTE 60,60,60,70
	.BYTE 70,70,50,50
	.BYTE 80,80,50,50
	.BYTE 50,80,80,80
FREQ10:	.BYTE 50,4C,48,44
	.BYTE 40,3C,38,34
	.BYTE 30,2C,28,24
	.BYTE 20,1C,18,14
	.BYTE 0D,9,5,2
CONT10:	.BYTE 0A0,0A1,0A2,0A3
	.BYTE 0A4,0A5,0A6,0A7
	.BYTE 0A8,0A9,0AA,0AB
	.BYTE 0AC,0AD,0AE,0AF
	.BYTE 0AF,0AF,0AF,0AF
FREQ11:	.BYTE 28,28,30,28
	.BYTE 28,30,3C,51
	.BYTE 50,50,60,50
	.BYTE 50,60,74,0A2
	.BYTE 0


	.SBTTL	CLRCH - COLOR RAM INITIALIZATION
; CLRCH - COLOR RAM INITIALIZATION
;
CLRCH:	LDA BKGND
	STA ANCOL+8		;SET BACKGROUND
	STA ANCOL+0C
	LDA LCOLOR
	BNE 10$			;CHANGE COLORS NOW
	RTS

10$:	LDA I,0
	STA LCOLOR		;CLEAR FLAG
	LDX PLAYR
	LDY X,CENTIN
	DEY			;0 TO 11.
	TYA
	ASL
	ASL
	STA TPIRQ2		;4* INDEX
	ASL			;8* INDEX (CLEARS CARRY)
	ADC TPIRQ2		;12* INDEX
	TAX
	LDA X,99$
	STA ANCOL+5		;INSIDE OF MUSHROOM
	STA ANCOL+0D		;INSIDE OF MUSHROOM
	STA ANCOL+1		;DDT EXPLOSIONS
	STA ANCOL+9
	LDA X,99$+1
	STA ANCOL+6		;OUTSIDE OF MUSHROOM
	STA ANCOL+0E		;OUTSIDE OF MUSHROOM
	LDA X,99$+2
	STA ANCOL+7		;INSIDE OF POISON MUSHROOM
	STA ANCOL+0F		;INSIDE OF POISON MUSHROOM
	LDA X,99$+3
	STA MOCOL+1		;CENTIPEDE
	LDA X,99$+4
	STA MOCOL+2		;CENTIPEDE
	LDA X,99$+5
	STA MOCOL+3		;CENTIPEDE
	STA MOCOL+0D		;EXPLOSIONS
	LDA X,99$+6
	STA MOCOL+5		;ANT, FLY, AND BEE
	LDA X,99$+7
	STA MOCOL+6
	LDA X,99$+8
	STA MOCOL+7
	LDA X,99$+9
	STA MOCOL+9		;SPIDER, SCORPION, EARWIG, AND SNAIL
	LDA X,99$+10.
	STA MOCOL+0A
	LDA X,99$+11.
	STA MOCOL+0B
	LDA I,1F		;RED
	STA MOCOL+0E		;SCORES AND EXPLOSIONS
	STA ANCOL+2		;ALPHANUMERICS
	LDA I,0			;WHITE
	STA MOCOL+0F		;PLAYER AND EXPLOSIONS
	STA ANCOL+3
	STA ANCOL+0A
	STA ANCOL+0B
	RTS

99$:	.BYTE 1F,27,21		;WHEN CENTIN=1 (MUCHROOMS-INSIDE,OUTSIDE,DDT)
	.BYTE 0F,39,0E2		;CENTIPEDE (LEGS, EYES, BODY)
	.BYTE 21,0F8,0E0	;BEE, DRAGONFLY AND MOSQUITO
	.BYTE 14,04,68		;SPIDER AND OTHERS
	.BYTE 0EF,63,39		;CENTIN=2
	.BYTE 04,0F8,0F
	.BYTE 04,1F,21
	.BYTE 1F,04,0F8
	.BYTE 4F,27,0F8		;CENTIN=3
	.BYTE 0B,21,0E7
	.BYTE 21,1F,63
	.BYTE 0F,1F,04
	.BYTE 0E7,39,0F		;CENTIN=4
	.BYTE 27,1F,0F8
	.BYTE 1F,04,0E0
	.BYTE 4F,1F,07
	.BYTE 0B,0E7,68		;CENTIN=5
	.BYTE 07,0E7,1F
	.BYTE 04,39,4F
	.BYTE 0F,63,0F8
	.BYTE 4F,0E2,27		;CENTIN=6
	.BYTE 39,0F8,68
	.BYTE 0F,04,39
	.BYTE 0E7,68,1F
	.BYTE 4F,0B,21		;CENTIN=7
	.BYTE 29,39,27
	.BYTE 0E2,04,1F
	.BYTE 04,0F8,0E7
	.BYTE 29,67,0F8		;CENTIN=8
	.BYTE 27,0F,4F
	.BYTE 63,0F8,1F
	.BYTE 39,1F,04
	.BYTE 0F8,6F,0E7	;CENTIN=9
	.BYTE 04,0E0,39
	.BYTE 27,1F,0E2
	.BYTE 27,0E0,1F
	.BYTE 04,0F,0E7		;CENTIN=10
	.BYTE 0F8,63,29
	.BYTE 0E2,39,1F
	.BYTE 0B,0F8,21
	.BYTE 39,0A7,04		;CENTIN=11
	.BYTE 0F8,4F,0E2
	.BYTE 0E7,1F,04
	.BYTE 21,4F,1F
	.BYTE 0B,0E2,0F8	;CENTIN=12
	.BYTE 0F8,1F,04
	.BYTE 0E7,0F8,4F
	.BYTE 27,68,0F
	.PAGE

	.MACRO	ASCIN A,C
	.WORD	A
	.ASCIN	/C/
	.ENDM

MES0:	ASCIN 16C,<PLAYER >
MES0G:	ASCIN 16C,<SPIELER >
MES0F:	ASCIN 16C,<JOUEUR >
MES0S:	ASCIN 16C,<JUGADOR >
MES1:	ASCIN 113,<1 COIN 2 PLAYS>
MES1G:	ASCIN 0F3,<1 MUENZE 2 SPIELE>
MES1F:	ASCIN 0F3,<1 PIECE 2 JOUEURS>
MES1S:	ASCIN 0F3,<1 FICHA 2 JUEGOS>
MES2:	ASCIN 113,<1 COIN 1 PLAY>
MES2G:	ASCIN 0F3,<1 MUENZE 1 SPIEL>
MES2F:	ASCIN 0F3,<1 PIECE 1 JOUEUR>
MES2S:	ASCIN 0F3,<1 FICHA 1 JUEGO>
MES3:	ASCIN 113,<2 COINS 1 PLAY>
MES3G:	ASCIN 0F3,<2 MUENZEN 1 SPIEL>
MES3F:	ASCIN 0F3,<2 PIECES 1 JOUEUR>
MES3S:	ASCIN 0F3,<2 FICHAS 1 JUEGO>
MES4:	ASCIN 14D,<GAME OVER>
MES4G:	ASCIN 14D,<SPIELENDE>
MES4F:	ASCIN 10D,<FIN DE PARTIE>
MES4S:	ASCIN 0ED,<JUEGO TERMINADO>
MES5:	ASCIN 0A7,<ENTER YOUR INITIALS>
MES5G:	ASCIN 027,<GEBEN SIE IHRE INITIALEN EIN>
MES5F:	ASCIN 087,<ENTREZ VOS INITIALES>
MES5S:	ASCIN 087,<ENTRE SUS INICIALES>
MES6:	ASCIN 0F1,<BONUS EVERY >
MES6G:	ASCIN 0F1,<BONUS JEDE >
MES6F:	ASCIN 0D1,<BONUS CHAQUE >
MES6S:	ASCIN 0F1,<EXTRA CADA >
MES7:	ASCIN 15D,<HIGH SCORES>
MES7G:	ASCIN 0DD,<HOECHSTERGEBNISSE>
MES7F:	ASCIN 11D,<MEILLEURS SCORE>
MES7S:	ASCIN 19D,<RECORDS>
MES8:	ASCIN 128,<GREAT SCORE>
MES8G:	ASCIN 088,<GROSSARTIGES ERGEBNIS>
MES8F:	ASCIN 0E8,<SPLENDIDE SCORE>
MES8S:	ASCIN 108,<GRAN PUNTAJE>
MES9:	ASCIN 152,<CREDITS >
MES9G:	ASCIN 152,<KREDITE >
MES9F:	ASCIN 152,<CREDITS >
MES9S:	ASCIN 152,<CREDITOS >
MES10:	ASCIN 0F0,<2 CREDIT MINIMUM>
MES10G:	ASCIN 30,<GELDEINWURF FUER 2 SPIELE>
MES10F:	ASCIN 0F0,<2 JEUX MINIMUM>
MES10S:	ASCIN 0F0,<2 JUEGAS MINIM0>
MES11:	ASCIN 0A0,<NEXT BONUS AT >
MES11G:	ASCIN 60,<WEITERER BONUS BEI >
MES11F:	ASCIN 40,<SUIVANT BONUS CHAQUE >
MES11S:	ASCIN 0A0,<CUADRO BONUS A >
MES12:	ASCIN 19A,<TIME >
MES12G:	ASCIN 19A,<ZEIT >
MES12F:	ASCIN 19A,<DUREE >
MES12S:	ASCIN 17A,<TIEMPO >
MES13:	ASCIN 0C7,<PRESS FIRE TO START>
MES13G:	ASCIN 27,<FIRE DRUECKEN WENN RICHTIG>
MES13F:	ASCIN 27,<POUSSEZ FEU QUAND CORRECTE>
MES13S:	ASCIN 07,<OPRIMA FIRE PARA SELECCIONAR>
MES14:	ASCIN 0A9,<SELECT STARTING SCORE>
MES14G:	ASCIN 0C9,<WAEHLE PUNKTZAHL>
MES14F:	ASCIN 69,<CHOISSISEZ VOTRE SCORE>
MES14S:	ASCIN 29,<SELLECCIONE CUADRO PUNTAJE>
MES15:	ASCIN 0C4,<FOR ADVANCED GAME>
MES15G:	ASCIN 024,<FUER FORTGESCHRITTENES SPIEL>
MES15F:	ASCIN 0E4,<POUR JEU AVANCE>
MES15S:	ASCIN 0C4,<POR JUEGO EXPERTO>
MES16:	ASCIN 123,<INSERT COIN>
MES16G:	ASCIN 0A3,< MUENZE EINWERFEN  >
MES16F:	ASCIN 083,<INTRODUIRE LES PIECES>
MES16S:	ASCIN 0E3,<INSERTE FICHAS>
MES17:	ASCIN 123,<PRESS START>
MES17G:	ASCIN 0A3,<STARTKNOPF DRUECKEN>
MES17F:	ASCIN 083,<  APPUYEZ SUR START  >
MES17S:	ASCIN 0E3,< PULSAR START >

;***************************************
;
;THIS POINT ON SHOULD BE WITHIN THE
;LAST 4K (ONE 2732) OF THE PROGRAM SPACE.
;
;*****************************************


	.SBTTL	MESS-MESSAGE ROUTINE
;MESS-MESSAGE ROUTINE
;
;ENTRY  (A)=BITS 0-6 MESSAGE NUMBER (0,1,2,...)
;	    BIT 7=1 TO BLANK MESSAGE
;	    BIT 7=0 TO WRITE MESSAGE
;EXIT	(TEMP4,TEMP4+1)=ADDRESS OF DESTINATION
;USES	(TEMP1,TEMP1+1),(TEMP4,TEMP4+1),(TEMP5,TEMP5+1)
;CALLS	CHAR
MESS:	ASL
	ROR TEMP1+1		;SAVE BLANK/WRITE FLAG
	ASL
	STA TEMP1
	LDA OPTNS2
	AND I,03		;LANGUAGE BITS
	ORA TEMP1
1$:	ASL
	TAX
	LDA X,MESG
	STA TEMP5
	LDA X,MESG+1
	STA TEMP5+1
	LDY I,0
	LDA NY,TEMP5
	TAX
	INY
	LDA NY,TEMP5
	BIT CKIND
	BPL 2$			;NOT COCKTAIL
	STA TEMP4+1
	STX TEMP4
	LDA I,0BF		;3BF-POSITION=FLIPPED POSITION
	SEC
	SBC TEMP4
	TAX
	LDA I,03
	SBC TEMP4+1
2$:	ORA I,PLYFLD/100
	STX TEMP4
	STA TEMP4+1
	INY			;PROPER POSITION OF INDEX
5$:	STY TEMP1
10$:	LDY TEMP1
	LDA NY,TEMP5
	AND I,3F		;GET RID OF SIGN BIT IF ANY
	CMP I,20
	BEQ 20$			;IF A BLANK, USE ZERO
	LDX TEMP1+1
	BPL 30$			;IF WRITE MESSAGE
20$:	LDA I,0			;BLANK MESSAGE
30$:	CMP I,30
	BCC 40$			;IF LETTER
	AND I,2F		;IF A NUMBER (MAP 31 TO 21, 32 TO 22,...)
40$:	JSR CHAR		;PUT OUT CHARACTER AND UPDATE (TEMP4,TEMP4+1)
45$:	LDY TEMP1
	INC TEMP1
	LDA NY,TEMP5
	BPL 10$			;IF MORE CHARACTERS TO COME
	RTS

MESS0	=.
	LDY I,0
	STY TEMP1+1		;DO NOT ERASE MESSAGE
	BEQ 1$			;ALWAYS
	
MESSAG	=.
	LDY I,0	
	STY TEMP1+1		;DO NOT ERASE MESSAGE
	BEQ 5$			;ALWAYS


MESG:	.WORD MES0
	.WORD MES0G
	.WORD MES0F
	.WORD MES0S
	.WORD MES1
	.WORD MES1G
	.WORD MES1F
	.WORD MES1S
	.WORD MES2
	.WORD MES2G
	.WORD MES2F
	.WORD MES2S
	.WORD MES3
	.WORD MES3G
	.WORD MES3F
	.WORD MES3S
	.WORD MES4
	.WORD MES4G
	.WORD MES4F
	.WORD MES4S
	.WORD MES5
	.WORD MES5G
	.WORD MES5F
	.WORD MES5S
	.WORD MES6
	.WORD MES6G
	.WORD MES6F
	.WORD MES6S
	.WORD MES7
	.WORD MES7G
	.WORD MES7F
	.WORD MES7S
	.WORD MES8
	.WORD MES8G
	.WORD MES8F
	.WORD MES8S
	.WORD MES9
	.WORD MES9G
	.WORD MES9F
	.WORD MES9S
	.WORD MES10
	.WORD MES10G
	.WORD MES10F
	.WORD MES10S
	.WORD MES11
	.WORD MES11G
	.WORD MES11F
	.WORD MES11S
	.WORD MES12
	.WORD MES12G
	.WORD MES12F
	.WORD MES12S
	.WORD MES13
	.WORD MES13G
	.WORD MES13F
	.WORD MES13S
	.WORD MES14
	.WORD MES14G
	.WORD MES14F
	.WORD MES14S
	.WORD MES15
	.WORD MES15G
	.WORD MES15F
	.WORD MES15S
	.WORD MES16
	.WORD MES16G
	.WORD MES16F
	.WORD MES16S
	.WORD MES17
	.WORD MES17G
	.WORD MES17F
	.WORD MES17S
	.WORD MES72
	.WORD MES73
	.WORD MES74
	.WORD MES75
	.WORD MES76
	.WORD MES77
	.WORD MES78
	.WORD MES79
	.WORD MES80
	.WORD MES81
	.WORD MES82
	.WORD MES83
	.WORD MES84
	.WORD MES85
	.WORD MES86
	.WORD MES87
	.WORD MES88
	.WORD MES89
	.WORD MES90

MES72:	ASCIN 0FE,<            >
MES73:	ASCIN 0FE,<2 CREDIT MIN>
MES74:	ASCIN 0FD,<DEMO          >
MES75:	ASCIN 0FD,<FREE PLAY     >
MES76:	ASCIN 0FD,<1 COIN 2 PLAYS>
MES77:	ASCIN 0FD,<1 COIN 1 PLAY >
MES78:	ASCIN 0FD,<2 COINS 1 PLAY>
MES79:	ASCIN 0FA,<EASY SIDEFEED>
MES80:	ASCIN 0FA,<HARD SIDEFEED>
MES81:	ASCIN 0F9,<EASY BEETLES>
MES82:	ASCIN 0F9,<HARD BEETLES>
MES83:	ASCIN 0F6,<EASY SPIDER>
MES84:	ASCIN 0F6,<HARD SPIDER>
MES85:	ASCIN 0F5,<SELECT>
MES86:	ASCIN 0F5,<      >
MES87:	ASCIN 0FF,<ENGLISH>
MES88:	ASCIN 0FF,<GERMAN >
MES89:	ASCIN 0FF,<FRENCH >
MES90:	ASCIN 0FF,<SPANISH>
	.PAGE
	.SBTTL	ABS/COMP
;ABS/COM-ABSOLUTE VALUE AND COMPLEMENT
;
;ENTRY	(A)=NUMBER
;	(CC)=NEGATIVE IF (A) IS NEGATIVE
;EXIT	(A)=RESULT
ABS:	BPL 10$			;IF POSITIVE
COMP	=.
	EOR I,0FF
	CLC
	ADC I,01
10$:	RTS



	.SBTTL	PRINT CHARACTER

;INITIAL-DISPLAY A PLAYER'S INITIAL
;
;ENTRY	(Y)=INDEX INTO INITL TABLE
;     	(TEMP4,TEMP4+1=SCREEN POSITION
;EXIT 	(TEMP4,TEMP4+1)=NEXT SCREEN POSITION
;USES	A,Y,(TEMP4,TEMP4+1)
INITAL:	LDA Y,INITL


;CHAR-PRINT ONE CHARACTER ON SCREEN
;
;ENTRY 	(TEMP4,TEMP4+1)=SCREEN POSITION
;      	(A)=CHARACTER
;EXIT 	(TEMP4,TEMP4+1)=NEXT SCREEN POSITION
CHAR:	ORA HILITE		;ADD HILITE IF NECESSARY
	LDY I,0
	STA NY,TEMP4		;WRITE TO PLAYFIELD
NULL:	LDA CKFF
	ORA I,20
	AND I,0E0
	CLC
	ADC TEMP4
	STA TEMP4		;UPDATE TO NEXT ADDRESS
	LDA CKFF
	ADC TEMP4+1
	STA TEMP4+1
	RTS


	.SBTTL	DIGITS
;
;ENTRY 	(A)=2 DIGITS OF SCORE
;	(TEMP4)=ADDRESS AT WHICH SCORE IS TO BE DISLAYED
;	(CC)=CARRY CLEAR IF NO ZERO SUPPRESSION
;EXIT	(TEMP4,TEMP4+1)=NEXT SCREEN ADDRESS
;	(CC)=CARRY CLEAR IF NO ZERO SUPPRESSION
;USES	A,Y,(TEMP4,TEMP4+1)
DIGIT2: PHA
	PHP
	LSR
	LSR
	LSR
	LSR
	PLP
	JSR DIGITZ		;PUT OUT A DIGIT
	PLA
	AND I,0F
DIGITZ:	BCC 10$		;IF NO ZERO SUPPRESSION
	AND I,0F
	BEQ 20$			;SUPPRESS THIS ZERO AND LEAVE CARRY SET
10$:	CLC
	ORA I,20		;DIGITS ARE 20-29
20$:	PHP
	CMP I,2A
	BCC 30$			;IF A NUMBER
	SBC I,29		;LETTERS START AT 1
30$:	JSR CHAR		;PUT OUT DIGIT
	PLP
	RTS

	.SBTTL	IRQ-IRQ PROCESSING
IRQ:	PHA			;SAVE REGISTERS
	TXA
	PHA
	TYA
	PHA
	CLD			;CLEAR DECIMAL MODE
	BIT VBLANK
	BVS 5$			;WE ARE IN VBLANK
	JMP 50$

5$:	INC SYNC		;WE ARE IN NEXT FRAME
	LDA $INTCT		;TO PREVENT SOUNDS FROM GLITCHING
	ORA I,03
	STA $INTCT		;MAKE "SOUNDS" SYNC WITH VBLANK
	INC FRAME		;UPDATE FRAME COUNTER
	BNE 8$			;IF NO OVERFLOW
	INC FRAME+1
	SED
	LDA GTIME		;INCREMENT GAME TIMER
	CLC
	ADC I,1
	STA GTIME
	LDA GTIME+1		;DO NOT WORRY ABOUT OVERFLOW
	ADC I,0			;40000 SECONDS=666 MINUTES=12 HOURS
	STA GTIME+1
	CLD
8$:	LDA SYNC
	CMP I,8
10$:	BCS 10$			;OOPS-WATCHDOG WILL RESET US.
	LDA $$CRDT
	CMP I,37.
15$:	BCS 15$			;OOPS-LET WATCHDOG RESET MS
	CMP I,19.
	BCC 20$			;IF SMALL # OF CREDITS
	LDA I,18.
	STA $$CRDT		;SET MAX NUMBER OF CREDITS
20$:	LDA JOYSTK		;CHECK JOYSTICKS
	LDY JHORIZ
	JSR JOYS		;RESPOND TO JOYSTICK
	STY JHORIZ		;NEW HORIZONTAL SPEED
	PHA
	TYA
	CLC
	ADC TB			;NEW HORIZONTAL SPEED
	STA TB
	PLA
	LDY JVERT
	JSR JOYS		;RESPOND TO JOYSTICK
	STY JVERT		;NEW VERTICAL SPEED
	TYA
	JSR COMP		;VERTICAL IS INVERTED
	CLC
	ADC TB+1		;NEW VERTICAL SPEED
	STA TB+1
	LDX I,15.
30$:	LDA X,MOBJV		;SET MOTION OBJECT ATTRIBUTES
	STA X,VPOS		;SET VERTICAL POSITION
	LDA X,MOBJH
	STA X,HPOS		;SET HORIZONTAL POSITION
	LDA X,MOBJDH
	EOR CKFF		;OPPOSITE IF COCKTAIL PLAYER 2
	AND I,80
	STA TPIRQ2
	LDA X,MOBJP
	BIT SLFTST
	BPL 34$			;IF IN SELF TEST
	CMP I,08
	BCS 33$			;IF NOT A CENTEPEDE SEGMENT
	TAY
	LDA X,MOBJV
	AND I,07
	BEQ 32$			;IF NOT TURNING (CARRY IS CLEAR)
	LDY I,08
	CMP I,06
	BCS 31$			;IF JUST STARTED TURNING
	CMP I,3
	BCC 31$			;IF ALMOST COMPLETED TURN
	LDY I,09
31$:	LDA X,MOBJDV
	EOR CKFF		;OPPOSITE IF COCKTAIL
	BPL 32$			;NO CHANGE IN PICTURE
	TYA
	ORA I,40
	TAY			;FIX TURNING CENTIPEDES GOING UP	
32$:	TYA			;FORM PICTURE CODE
33$:	EOR TPIRQ2
34$:	STA X,PICT		;SET PICUTRE #
	LDA X,MOBJC
	STA X,COLOR
	DEX
	BPL 30$			;LOOP THRU ALL OBJECTS
	BIT SLFTST
	BPL 50$			;IF IN SELF-TEST
	JSR CLRCH		;CHANGE COLORS IF NECESSARY
50$:	BIT SLFTST
	BMI 55$			;IF NOT SELF-TEST
	LDA COLCNT
	BMI 69$			;IF NOT IN COLOR BAR TEST
	BIT VBLANK
	BVC 52$			;NOT VBLANK
	LDA I,0
	STA COLCNT		;RESET COUNTER
52$:	INC COLCNT
	ASL
	ASL
	ASL
	ASL			;0,10,20,30
	TAY
	LDX I,0
53$:	LDA Y,COLORS
	EOR GRNGUN		;ADD GREEN IF ANY
	STA X,ANCOL		;SET PLAYFIELD COLORS
	INY
	INX
	CPX I,10
	BCC 53$			;DO ALL 16 COLORS
	BCS 69$			;ALWAYS-SKIP OVER COIN CHECK

55$:	JSR SOUNDS		;PROCESS SOUNDS
	JSR MOOLAH		;COIN ROUTINE
	LDX I,2
60$:	LDA X,$CCTIM		;SET COIN COUNTERS
	STA X,CCNTR
	DEX
	BPL 60$
	LDX I,27.		;NUMBER OF BYTES TO CHECKSUM
SECUR0	=.+1
	LDA I,88		;EXPECTED CHECKSUM
65$:	EOR X,CPYRHT		;CHECKSUM THE COPYRIGHT MESSAGE
	DEX
	BPL 65$
	TAX
	BEQ 69$			;IF CHECKSUM IS OK
	TSX
	LDA I,3			;OR WRITE TO TEMP2 OR EQUIVALENT TEMPORARY
	STA X,104		;SET FLAGS TO JUNK
69$:	LDX I,01
70$:	LDA X,TBALL		;READ TRACKBALL
	TAY
	SEC
	SBC X,OLDTB
	STY X,OLDTB		;SAVE CURRENT TRACK BALL READING
	AND I,0F		;LOWER 4 BITS ONLY
	CMP I,08
	BCC 85$			;SIGN EXTEND
	ORA I,0F0
85$:	TAY
	BEQ 89$			;PREVENTS STUCK TRACKBALL WHEN COUNTER WRAPPED
	EOR X,TBRD
	BPL 87$			;IF SAME DIRECTION AS LAST TIME
	TYA
	EOR X,TBALL
	BPL 87$			;IF WE ARE GOING IN THE CORRECT DIRECTION
	LDY X,TBRD		;USE LAST READING
87$:	TYA
	STA X,TBRD		;SAVE LAST READING
	CLC
	ADC X,TB
	STA X,TB		;UPDATE COUNT
89$:	DEX
	BPL 70$			;ON TO NEXT TRACKBALL
90$:	STA IRQACK		;ACKNOWLEDGE IRQ
	LDA $LMTIM
	BEQ 94$			;IF NO ABUSE
	LDA I,10		;EAR PIERCING
	STA AUDF1
	STA AUDF0
	LDA I,0AF		;CONSTANT TONE AND MAX VOLUME
	STA AUDC0
	STA AUDC1
94$:	PLA			;RESTORE REGISTERS
	TAY
	PLA
	TAX
	PLA
	RTI			;RETURN FROM IRQ

COLORS:	.BYTE 0FF,0FF,0FD,0FC	;FIRST COLUMN-TV COLOR SET
	.BYTE 0DF,0DE,0DD,0DC	;SECOND COLUMN
	.BYTE 0FB,0FA,0F9,0F8	;FIRST COLUMN
	.BYTE 0DB,0DA,0D9,0D8	;SECOND COLUMN
	.BYTE 9F,9E,9D,9C	;FORTH COLUMN
	.BYTE 0BF,0BE,0BD,0BC	;THIRD COLUMN
	.BYTE 9B,9A,99,98	;FORTH COLUMN
	.BYTE 0BB,0BA,0B9,0B8	;THIRD COLUMN
	.BYTE 7F,7E,7D,7C	;FIFTH COLUMN
	.BYTE 5F,5E,5D,5C	;SIXTH COLUMN
	.BYTE 7B,7A,79,78	;FIFTH COLUMN
	.BYTE 5B,5A,59,58	;SIXTH COLUMN
	.BYTE 1F,1E,1D,1C	;EIGHTH COLUMN
	.BYTE 3F,3E,3D,3C	;SEVENTH COLUMN
	.BYTE 1B,1A,19,18	;EIGHTH COLUMN
	.BYTE 3B,3A,39,38	;SEVENTH COLUMN


	.SBTTL	JOYS - READ AND RESPOND TO JOYSTICKS
;
; ENTRY	(Y) = LAST SPEED
;	(A) = CURRENT JOYSTICK READING
; EXIT	(Y) = NEW SPEED
; USES	A,Y

JOYS:	LSR
	BCC 10$			;IF RIGHT OR DOWN
	LSR
	BCC 20$			;IF LEFT OR UP
	LDY I,0			;RESET Y DIRECTION
	RTS

10$:	CPY I,0FA
	BEQ 18$			;ALREADY AT MAX
	BCS 15$			;IF IT WAS GOING IN RIGHT DIRECTION
	LDY I,0			;RESET SPEED
15$:	DEY			;INCREASE SPEED
18$:	LSR			;REMOVE OTHER DIRECTION
	RTS

20$:	CPY I,06
	BEQ 28$			;ALREADY AT MAX
	BCC 25$			;IF IT WAS GOING IN RIGHT DIRECTION
	LDY I,0			;RESET SPEED
25$:	INY			;INCREASE SPEED
28$:	RTS

	.END
                                                                                                                                  